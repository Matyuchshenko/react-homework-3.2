{"version":3,"sources":["components/Container/Container.js","components/SearchBar/SearchBar.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Button/Button.js","components/Modal/Modal.js","services/hits-api.js","App.js","reportWebVitals.js","index.js"],"names":["Container","children","className","Searchbar","onHandleSubmit","onSearchQueryChange","value","onSubmit","type","autoComplete","autoFocus","placeholder","onChange","ImageGalleryItem","webformatURL","largeImageURL","tags","onOpenModal","src","alt","data-source","onClick","defaultProps","ImageGallery","images","map","id","Button","onLoadMore","modalRoot","document","querySelector","Modal","handler","e","code","props","onToggleModal","handleBackdrop","currentTarget","target","window","addEventListener","this","removeEventListener","createPortal","Component","axios","defaults","baseURL","params","key","image_type","orientation","per_page","apiService","q","page","a","get","data","hits","console","log","error","App","state","query","isLoading","showModal","searchImages","trim","toast","info","setState","request","length","scrollTo","top","documentElement","scrollHeight","behavior","handleChange","handleSubmit","preventDefault","scrollPage","dataset","source","toggleModal","setTimeout","scrollBy","clientHeight","prevProps","prevState","message","color","height","width","style","textAlign","autoClose","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.253df203.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './Container.css';\r\n\r\nconst Container = ({ children }) => <div className=\"container\">{children}</div>;\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Container;","import './SearchBar.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Searchbar({ onHandleSubmit, onSearchQueryChange, value }) {\r\n  return (\r\n    <header className=\"Searchbar\">\r\n      <form className=\"SearchForm\" onSubmit={onHandleSubmit}>\r\n        <button type=\"submit\" className=\"SearchForm__button\">\r\n          <span className=\"SearchForm__button__label\">Search</span>\r\n        </button>\r\n\r\n        <input\r\n          className=\"SearchForm__input\"\r\n          type=\"text\"\r\n          value={value}\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search images and photos\"\r\n          onChange={onSearchQueryChange}\r\n        />\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propTypes = {\r\n  onHandleSubmit: PropTypes.func.isRequired,\r\n  onSearchQueryChange: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};","import PropTypes from 'prop-types';\r\nimport './ImageGalleryItem.css';\r\n\r\nexport default function ImageGalleryItem({ webformatURL, largeImageURL, tags, onOpenModal }) {\r\n  return (\r\n    <li className=\"ImageGalleryItem\">\r\n      <img\r\n        src={webformatURL}\r\n        alt={tags}\r\n        data-source={largeImageURL}\r\n        className=\"ImageGalleryItem_image\"\r\n        onClick={onOpenModal}\r\n      />\r\n    </li>\r\n  );\r\n}\r\n\r\nImageGalleryItem.defaultProps = {\r\n    src:'https://dummyimage.com/640x480/2a2a2a/ffffff&text=Photo%20not%20found',\r\n    alt:''\r\n}\r\n\r\nImageGalleryItem.propTypes = {\r\n  largeImageURL: PropTypes.string.isRequired,\r\n  tags: PropTypes.string.isRequired,\r\n  webformatURL: PropTypes.string.isRequired,\r\n};","import PropTypes from 'prop-types';\r\n\r\nimport ImageGalleryItem from './../ImageGalleryItem/ImageGalleryItem'\r\n\r\nimport './ImageGallery.css';\r\n\r\nexport default function ImageGallery({ images, onOpenModal }) {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {images.map(({ id, webformatURL, largeImageURL, tags }) => (\r\n        <ImageGalleryItem\r\n          key={id}\r\n          webformatURL={webformatURL}\r\n          largeImageURL={largeImageURL}\r\n          tags={tags}\r\n          onOpenModal={onOpenModal}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nImageGallery.defaultProps = {\r\n    images:[]\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  images: PropTypes.array.isRequired,\r\n  onOpenModal: PropTypes.func.isRequired,\r\n};","import PropTypes from 'prop-types';\r\nimport './Button.css';\r\n\r\nfunction Button({ onLoadMore }) {\r\n  return (\r\n    <button type=\"button\" className=\"Button\" onClick={onLoadMore}>\r\n      Load more\r\n    </button>\r\n  );\r\n}\r\n\r\nButton.defaultProps = {\r\n    onClick:()=>null,\r\n    children:null\r\n}\r\n\r\nButton.propTypes = {\r\n  onLoadMore: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Button;","import PropTypes from 'prop-types';\r\nimport { Component } from 'react';\r\nimport './Modal.css';\r\n\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nexport default class Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handler);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handler);\r\n  }\r\n\r\n  handler = e => {\r\n    if (e.code === 'Escape') {\r\n      this.props.onToggleModal();\r\n    }\r\n  };\r\n\r\n  handleBackdrop = e => {\r\n    if (e.currentTarget === e.target) {\r\n      this.props.onToggleModal();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { largeImageURL } = this.props;\r\n\r\n    return createPortal(\r\n      <div className=\"Overlay\" onClick={this.handleBackdrop}>\r\n        <div className=\"Modal\">\r\n          <img src={largeImageURL} alt=\"\" />\r\n        </div>\r\n      </div>,\r\n      modalRoot,\r\n    );\r\n  }\r\n}\r\n\r\nModal.propTypes = {\r\n  onToggleModal: PropTypes.func.isRequired,\r\n};\r\n\r\n","import axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://pixabay.com/api/\";\r\nconst API_KEY = \"18815450-007739eb5f1c89a4d6d918d62\";\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  key: API_KEY,\r\n  image_type: 'photo',\r\n  orientation: 'horizontal',\r\n  per_page: 12,\r\n};\r\n\r\nconst apiService = async (q, page) => {\r\n  try {\r\n    const { data } = await axios.get('', {\r\n      params: { q, page },\r\n    });\r\n    return data.hits;\r\n  } catch (error) {\r\n    console.log('error', { error });\r\n    return [];\r\n  }\r\n};\r\n\r\nexport default apiService;\r\n","import React, { Component } from \"react\";\nimport { ToastContainer, toast } from \"react-toastify\";\n\nimport Container from \"./components/Container/Container\";\nimport Loader from \"react-loader-spinner\";\nimport Searchbar from \"./components/SearchBar\";\nimport ImageGallery from \"./components/ImageGallery\";\nimport Button from \"./components/Button\";\nimport Modal from \"./components/Modal\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nimport apiService from \"./services/hits-api\";\n\nexport default class App extends Component {\n  state = {\n    query: \"\",\n    images: [],\n    largeImageURL: \"\",\n    page: 1,\n    error: null,\n    isLoading: false,\n    showModal: false,\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.query !== this.state.query) {\n      this.setState({ images: [], page: 1, error: null });\n    }\n  }\n\n  searchImages = async () => {\n    const { query, page } = this.state;\n\n    if (query.trim() === \"\") {\n      return toast.info(\"Please enter search query to find images!\");\n    }\n\n    this.setState({ isLoading: true });\n\n    try {\n      const request = await apiService(query, page);\n\n      this.setState(({ images, page }) => ({\n        images: [...images, ...request],\n        page: page + 1,\n      }));\n      if (request.length === 0) {\n        this.setState({ error: `No results found ${query}!` });\n      }\n    } catch (error) {\n      this.setState({ error: error });\n    } finally {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: \"smooth\",\n      });\n      this.setState({ isLoading: false });\n    }\n  };\n\n  handleChange = e => {\n    this.setState({ query: e.target.value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.searchImages();\n  };\n\n  onLoadMore = () => {\n    this.searchImages();\n    this.scrollPage();\n  };\n\n  onOpenModal = (e) => {\n    this.setState({ largeImageURL: e.target.dataset.source });\n    this.toggleModal();\n  };\n\n  toggleModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }));\n  };\n\n  scrollPage = () => {\n    setTimeout(() => {\n      window.scrollBy({\n        top: document.documentElement.clientHeight - 160,\n        behavior: \"smooth\",\n      });\n    }, 1000);\n  };\n\n  render() {\n    const {\n      query,\n      images,\n      largeImageURL,\n      isLoading,\n      showModal,\n      error,\n    } = this.state;\n\n    return (\n      <Container>\n        <Searchbar\n          onHandleSubmit={this.handleSubmit}\n          onSearchQueryChange={this.handleChange}\n          value={query}\n        />\n\n        {error && <p>Whoops, something went wrong: {error.message}</p>}\n\n        {images.length > 0 && (\n          <ImageGallery images={images} onOpenModal={this.onOpenModal} />\n        )}\n\n        {isLoading && (\n          <Loader\n            type=\"Oval\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n            style={{ textAlign: \"center\" }}\n          />\n        )}\n\n        {!isLoading && images.length > 0 && (\n          <Button onLoadMore={this.onLoadMore} />\n        )}\n\n        {showModal && (\n          <Modal\n            onToggleModal={this.toggleModal}\n            largeImageURL={largeImageURL}\n          />\n        )}\n        <ToastContainer autoClose={2000} />\n      </Container>\n    );\n  }\n}\n\n// import React, { useState, useEffect } from 'react';\n// import { ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\n// import apiService from './services/api-service';\n// import Container from './component/Container/Container';\n// import Searchbar from './component/Searchbar/SearchBar';\n// import ImageGallery from './component/ImageGallery/ImageGallery';\n// import Button from './component/Button/Button';\n// import LoaderComponent from './component/Loader/Loader';\n// import Modal from './component/Modal/Modal';\n// import ErrorView from './component/ShowError/ShowError';\n\n// function App() {\n//   const [query, setQuery] = useState('');\n//   const [images, setImages] = useState([]);\n//   const [largeImageURL, setLargeImageURL] = useState('');\n//   const [page, setPage] = useState(1);\n//   const [error, setError] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [showModal, setShowModal] = useState(false);\n\n//   useEffect(() => {\n//     if (!query) return;\n//     const fetchImages = async () => {\n//       try {\n//         const request = await apiService(query, page);\n//         if (request.length === 0) {\n//           return setError(`No results were found for ${query}!`);\n//         }\n//         setImages(prevImages => [...prevImages, ...request]);\n//       } catch (error) {\n//         setError('Something went wrong. Try again.');\n//       } finally {\n//         setIsLoading(false);\n//       }\n//     };\n\n//     fetchImages();\n//   }, [page, query]);\n\n//   const searchImages = newSearch => {\n//     setQuery(newSearch);\n//     setImages([]);\n//     setPage(1);\n//     setError(null);\n//     setIsLoading(true);\n//   };\n\n//   const onLoadMore = () => {\n//     setIsLoading(true);\n//     setPage(prevPage => prevPage + 1);\n//     scrollPage();\n//   };\n\n//   const onOpenModal = e => {\n//     setLargeImageURL(e.target.dataset.source);\n//     toggleModal();\n//   };\n\n//   const toggleModal = () => {\n//     setShowModal(!showModal);\n//   };\n\n//   const scrollPage = () => {\n//     setTimeout(() => {\n//       window.scrollBy(0, window.innerHeight + 150);\n//     }, 1000);\n//   };\n\n//   return (\n//     <Container>\n//       <Searchbar onHandleSubmit={searchImages} />\n\n//       {error && <ErrorView texterror={error} />}\n\n//       {images.length > 0 && (\n//         <ImageGallery images={images} onOpenModal={onOpenModal} />\n//       )}\n\n//       {isLoading && <LoaderComponent />}\n\n//       {!isLoading && images.length > 0 && <Button onLoadMore={onLoadMore} />}\n\n//       {showModal && (\n//         <Modal onToggleModal={toggleModal} largeImageURL={largeImageURL} />\n//       )}\n//       <ToastContainer autoClose={3700} />\n//     </Container>\n//   );\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}